= Test::Unit::XML
== An XML Test Framework

Version: 0.1.3

Author: Henrik Mårtensson

(c) 2006 by Henrik Mårtensson

== Introduction

Test::Unit::XML extends the Test::Unit framework with
an assertion for testing well-formed XML documents.

Using Test::Unit::XML is easy. All you have to do is to
require +testunitxml+, and you will then have an
+assert_xml_equal+ assertion available in the
Test::Unit::TestCase class.

See the test case tc_testunitxml.rb[link:../../test/tc_testunitxml.rb] included in the distribution package
for an example.


== What Does _Equal_ XML Documents Mean?

It is hard to define exactly what _equal_ means in the
context of XML documents. I have tried to follow W3C
XML recommendations as far as possible. There are a
few things worthy of note:

* Doctype declarations are not compared with each
  other. If a declaration is present in one document,
  there must be a Doctype declaration in the other,
  but there is no effort to compare them.

* Namespace _declarations_, i.e. attributes that declare
  namespaces, are ignored for comparison purposes. (The
  namespaces _are_ used in comparisons.) The reason is
  that XML processors may move the declarations from one
  element to another, or change prefixes in ways that
  cannot be directly controlled by a programmer. For
  example, two different XSLT processors could use
  the same stylesheet and produce XML documents that use
  different namespace prefixes, and have declarations
  on different elements, but are still considered equal.

* Text nodes that are empty or contain only whitespace
  are ignored for comparison purposes. This makes it
  easier to test output from various transformation
  engines. These often produce extraneous whitespace.

== The Future

There are a few things in the pipeline:

* Doctype comparison. There will be assertions for comparing:
    - Entity declarations
    - SYSTEM identifiers
    - PUBLIC identifiers
* Schema Validation. The first thing to add is validation
  against RELAX NG schemas. This will probably be done
  by having Test::Unit::XML call Jing, a popular RELAX NG
  validator written in Java. I will also look into DTD
  validation, and (Urgh!) W3C Schema validation, but
  RELAX NG has top priority, because it is the most powerful
  and flexible of the three schema types.
* Configurability. It _might_ be useful to be able to set
  configuration options for testing. I'll have to think a
  bit about this though.
* Document difference functions, like the Java XMLUnit test
  suite.

I plan to implement these features as I need them in other
projects, so there is no time plan, and no guarantee as to the
order in which I'll implement anything.

== License

See the {MIT-LICENSE}[link:files/MIT-LICENSE.html] file.

== Contact

You can email bug reports, opinions and questions to
mailto:self@henrikmartensson.org. You may also wish to visit
my home page, www.henrikmartensson.org, for more information
about Test::Unit::XML and other projects.

If you find Test::Unit::XML useful, please do tell me about it. I would like
to list projects that use it on my web site.

If you find Test::Unit::XML lacking in some respect, or buggy,
I am even more interested. I can't fix bugs I do not know about.

Finally, if you write about Test::Unit::XML, I'd like to link to
the article on my web site, or at least mention it if you write
for a magazine, so please tell me.

